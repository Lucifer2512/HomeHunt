// <auto-generated />
using System;
using DataAccessLayer.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(HomeHuntContext))]
    [Migration("20241010185019_v1")]
    partial class v1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataAccessLayer.Models.Contract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("HomeOwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("RoommId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("HomeOwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<Guid>("RoommId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("DataAccessLayer.Models.House", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Ward")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id")
                        .HasName("house_id_primary");

                    b.ToTable("House", (string)null);
                });

            modelBuilder.Entity("DataAccessLayer.Models.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SocialAccount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("post_id_primary");

                    b.HasIndex("RoomId");

                    b.ToTable("Post", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f4c96cab-02bc-462e-b746-7c336daa623d"),
                            Description = "This is a post. Here is some more characters to test the length of the text box",
                            ImageUrl = "not yet set up",
                            Phone = "123456789",
                            Price = 10000m,
                            RoomId = new Guid("1b9cbb78-8942-4783-8e26-b19e8e7e98c8"),
                            SocialAccount = "zalo || fb",
                            Title = "Temporary Post"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Models.Rating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("rating_id_primary");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("Rating", (string)null);
                });

            modelBuilder.Entity("DataAccessLayer.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("role_id_primary");

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8f82ec39-63e6-4cd4-95d2-091a656ae301"),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("bcadf39b-13b8-4958-8472-61f4c993fbe5"),
                            Name = "Customer"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Models.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("HouseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Length")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Services")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Width")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id")
                        .HasName("room_id_primary");

                    b.HasIndex("HouseId");

                    b.ToTable("Room", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("1b9cbb78-8942-4783-8e26-b19e8e7e98c8"),
                            Description = "This is a room. Here is some more characters to test the length of the text box",
                            Length = "10m",
                            Name = "Temporary Room",
                            Width = "5m"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Models.RoomApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dob")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.HasKey("Id")
                        .HasName("application_id_primary");

                    b.HasIndex("UserId");

                    b.ToTable("Application", (string)null);
                });

            modelBuilder.Entity("DataAccessLayer.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Gender")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id")
                        .HasName("user_id_primary");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("user_email_unique")
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("RoleId");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("user_Username_unique");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("5428c36a-1b59-4da1-a368-984625ac03dd"),
                            Email = "Admin1@email.com",
                            FullName = "Admin 1",
                            Password = "aqhZuTY3dDT8fPSB0pciFN1daufpI2JNvn563e0PdyLVcx3E",
                            PhoneNumber = "123456789",
                            RoleId = new Guid("8f82ec39-63e6-4cd4-95d2-091a656ae301"),
                            Username = "Admin1"
                        },
                        new
                        {
                            Id = new Guid("f4b08629-3b81-48d6-82f3-e6cbc8f8b7d5"),
                            Email = "Admin2@email.com",
                            FullName = "Admin 2",
                            Password = "A3qTtcrMtUdqyRJrh0rV+rVdcHOGPZucTqx2YJ9hIvPxLJIE",
                            PhoneNumber = "123456789",
                            RoleId = new Guid("8f82ec39-63e6-4cd4-95d2-091a656ae301"),
                            Username = "Admin2"
                        },
                        new
                        {
                            Id = new Guid("40424a9a-f91b-4f27-830d-eb30b2df9b0b"),
                            Email = "Customer1@email.com",
                            FullName = "Customer 1",
                            Password = "8qfckl4m1VhpljKFpIAEHzg02GAI9R57mNRVpZHrWbhsoHXs",
                            PhoneNumber = "123456789",
                            RoleId = new Guid("bcadf39b-13b8-4958-8472-61f4c993fbe5"),
                            Username = "Customer1"
                        },
                        new
                        {
                            Id = new Guid("44c716f8-f52e-4f40-8889-068506138059"),
                            Email = "Customer2@email.com",
                            FullName = "Customer 2",
                            Password = "p8YPG2OSpqzVi+aGgKHkqDVcvq5DCC5QfnlCIRDK08AqINSJ",
                            PhoneNumber = "123456789",
                            RoleId = new Guid("bcadf39b-13b8-4958-8472-61f4c993fbe5"),
                            Username = "Customer2"
                        },
                        new
                        {
                            Id = new Guid("31255bb0-d39a-4bc0-8e04-ecb8953cf894"),
                            Email = "Customer3@email.com",
                            FullName = "Customer 3",
                            Password = "UIataCcoN+a5Wlpxex3o+vY4sviXJVp6LkCEvGwBHaWySRiy",
                            PhoneNumber = "123456789",
                            RoleId = new Guid("bcadf39b-13b8-4958-8472-61f4c993fbe5"),
                            Username = "Customer3"
                        },
                        new
                        {
                            Id = new Guid("1c54b7b0-ca76-4b60-977f-377c88b4b2f2"),
                            Email = "Customer4@email.com",
                            FullName = "Customer 4",
                            Password = "8Sqv0U8tCSjuci3ZFJ9iUtq+/nNEJSlXacIhvUG2fLbUOmM9",
                            PhoneNumber = "123456789",
                            RoleId = new Guid("bcadf39b-13b8-4958-8472-61f4c993fbe5"),
                            Username = "Customer4"
                        },
                        new
                        {
                            Id = new Guid("6a62a9e2-0d6d-4940-890b-b38e4a9d1aa4"),
                            Email = "Customer5@email.com",
                            FullName = "Customer 5",
                            Password = "nsYXdLcOzYeto1vveQGzxd2qeyQc4jESbU02Fw+M+2MCzQbR",
                            PhoneNumber = "123456789",
                            RoleId = new Guid("bcadf39b-13b8-4958-8472-61f4c993fbe5"),
                            Username = "Customer5"
                        },
                        new
                        {
                            Id = new Guid("bbf4670c-51f5-4473-92b1-fbcbf6dfdad0"),
                            Email = "Customer6@email.com",
                            FullName = "Customer 6",
                            Password = "jgYOIa8Kp9lN6KN93Zr744rU12QJojZPOfbArBeixtTy/izM",
                            PhoneNumber = "123456789",
                            RoleId = new Guid("bcadf39b-13b8-4958-8472-61f4c993fbe5"),
                            Username = "Customer6"
                        },
                        new
                        {
                            Id = new Guid("07226311-4297-4770-ab15-31226043ef9b"),
                            Email = "Customer7@email.com",
                            FullName = "Customer 7",
                            Password = "wX/nmetDeuiYEw4ftk3ubD8G81iRIjucA4tzPLqoMytuiDay",
                            PhoneNumber = "123456789",
                            RoleId = new Guid("bcadf39b-13b8-4958-8472-61f4c993fbe5"),
                            Username = "Customer7"
                        },
                        new
                        {
                            Id = new Guid("811119e4-b69c-4837-ac48-c25c00841d45"),
                            Email = "Customer8@email.com",
                            FullName = "Customer 8",
                            Password = "AR1/yW15hecjB1yXIeqTMNLkpD2RzqL2cSluyLjguDzLQtn0",
                            PhoneNumber = "123456789",
                            RoleId = new Guid("bcadf39b-13b8-4958-8472-61f4c993fbe5"),
                            Username = "Customer8"
                        },
                        new
                        {
                            Id = new Guid("1104c4c0-6de9-480c-be96-657c793e1d14"),
                            Email = "Customer9@email.com",
                            FullName = "Customer 9",
                            Password = "lI544DbvdacVtQYbpCC7aKDQufFo/A7MYV76ObwaOnbIXbkN",
                            PhoneNumber = "123456789",
                            RoleId = new Guid("bcadf39b-13b8-4958-8472-61f4c993fbe5"),
                            Username = "Customer9"
                        },
                        new
                        {
                            Id = new Guid("049b2b54-b2dd-4465-8a64-f8e1158d5649"),
                            Email = "Customer10@email.com",
                            FullName = "Customer 10",
                            Password = "BGLKy5l67GvuLrdoXEtNq4Zubmq9PA2oxrVlm3uJp9V8oufx",
                            PhoneNumber = "123456789",
                            RoleId = new Guid("bcadf39b-13b8-4958-8472-61f4c993fbe5"),
                            Username = "Customer10"
                        },
                        new
                        {
                            Id = new Guid("fe740cab-b613-416f-86ab-d157fa442aa6"),
                            Email = "Customer11@email.com",
                            FullName = "Customer 11",
                            Password = "GY7+M7DBfT30p8qTD5cAqiRgwTOFNx05UAEL9xJ4evv7PBF+",
                            PhoneNumber = "123456789",
                            RoleId = new Guid("bcadf39b-13b8-4958-8472-61f4c993fbe5"),
                            Username = "Customer11"
                        },
                        new
                        {
                            Id = new Guid("c4962bb9-f368-4364-b0c4-1c3d2a3ce467"),
                            Email = "Customer12@email.com",
                            FullName = "Customer 12",
                            Password = "1AzvD0GhmKvmKU3gs2rOU77iCOmjoOTYyoaGOcbDytUCrHwx",
                            PhoneNumber = "123456789",
                            RoleId = new Guid("bcadf39b-13b8-4958-8472-61f4c993fbe5"),
                            Username = "Customer12"
                        },
                        new
                        {
                            Id = new Guid("f87a4f08-9dba-461a-8dcc-8ecd0f69df26"),
                            Email = "Customer13@email.com",
                            FullName = "Customer 13",
                            Password = "XcNpA2VfRo5GyfTTy/fpnLyiXVAhdiH+RzE+OGJEkByCTI+K",
                            PhoneNumber = "123456789",
                            RoleId = new Guid("bcadf39b-13b8-4958-8472-61f4c993fbe5"),
                            Username = "Customer13"
                        },
                        new
                        {
                            Id = new Guid("da34ed35-ca09-443b-9f72-3ad5248276f4"),
                            Email = "Customer14@email.com",
                            FullName = "Customer 14",
                            Password = "v+BpSEcyj+6axmJFqq0TXI4MoocJhyh/vPqdDqfPHYUV2EyH",
                            PhoneNumber = "123456789",
                            RoleId = new Guid("bcadf39b-13b8-4958-8472-61f4c993fbe5"),
                            Username = "Customer14"
                        },
                        new
                        {
                            Id = new Guid("58ec66f5-d29c-4f16-aead-db7237017bb3"),
                            Email = "Customer15@email.com",
                            FullName = "Customer 15",
                            Password = "aU1fxdVE9AG0FI0x1ccYlWl7Yq9WlFpqb3dqBlA532Y6fPTP",
                            PhoneNumber = "123456789",
                            RoleId = new Guid("bcadf39b-13b8-4958-8472-61f4c993fbe5"),
                            Username = "Customer15"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Models.Post", b =>
                {
                    b.HasOne("DataAccessLayer.Models.Room", "Room")
                        .WithMany("Posts")
                        .HasForeignKey("RoomId")
                        .IsRequired()
                        .HasConstraintName("post_roomid_foreign");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Rating", b =>
                {
                    b.HasOne("DataAccessLayer.Models.Room", "Room")
                        .WithMany("Ratings")
                        .HasForeignKey("RoomId")
                        .IsRequired()
                        .HasConstraintName("rating_roomid_foreign");

                    b.HasOne("DataAccessLayer.Models.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("rating_userid_foreign");

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Room", b =>
                {
                    b.HasOne("DataAccessLayer.Models.House", "House")
                        .WithMany("Rooms")
                        .HasForeignKey("HouseId")
                        .HasConstraintName("room_houseid_foreign");

                    b.Navigation("House");
                });

            modelBuilder.Entity("DataAccessLayer.Models.RoomApplication", b =>
                {
                    b.HasOne("DataAccessLayer.Models.User", "User")
                        .WithMany("Applications")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("application_userid_foreign");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccessLayer.Models.User", b =>
                {
                    b.HasOne("DataAccessLayer.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("user_roleid_foreign");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DataAccessLayer.Models.House", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Room", b =>
                {
                    b.Navigation("Posts");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("DataAccessLayer.Models.User", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("Ratings");
                });
#pragma warning restore 612, 618
        }
    }
}
