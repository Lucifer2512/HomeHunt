// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using DataAccessLayer.Tools;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;

namespace DataAccessLayer.Models;

public partial class HomeHuntContext : DbContext
{

    public virtual DbSet<RoomApplication> Applications { get; set; }

    public virtual DbSet<Contract> Contracts { get; set; }

    public virtual DbSet<Feedback> Feedbacks { get; set; }

    public virtual DbSet<House> Houses { get; set; }

    public virtual DbSet<Post> Posts { get; set; }

    public virtual DbSet<Rating> Ratings { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<Room> Rooms { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public HomeHuntContext(DbContextOptions<HomeHuntContext> options) : base(options)
    {
    }


    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
         => optionsBuilder.UseSqlServer(GetConnectionString());

    string GetConnectionString()
    {
        IConfiguration builder = new ConfigurationBuilder()
            .SetBasePath(Directory.GetCurrentDirectory())
            .AddJsonFile("appsettings.json", true, true)
            .Build();
        return builder["ConnectionStrings:Server"];
    }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<RoomApplication>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("application_id_primary");
            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd();
            entity.ToTable("Application");

            entity.Property(e => e.Dob)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.FullName)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Gender)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.PhoneNumber)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.User).WithMany(p => p.Applications)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("application_userid_foreign");
        });

        modelBuilder.Entity<House>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("house_id_primary");
            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd();

            entity.ToTable("House");

            entity.Property(e => e.Address)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.City)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.District)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Ward)
                .IsRequired()
                .HasMaxLength(255);
        });

        modelBuilder.Entity<Post>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("post_id_primary");
            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd();
            entity.ToTable("Post");

            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.ImageUrl)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(255);

            entity.HasOne(d => d.Room).WithMany(p => p.Posts)
                .HasForeignKey(d => d.RoomId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("post_roomid_foreign");
        });

        modelBuilder.Entity<Rating>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("rating_id_primary");
            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd();
            entity.ToTable("Rating");

            entity.Property(e => e.Date).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(255);

            entity.HasOne(d => d.Room).WithMany(p => p.Ratings)
                .HasForeignKey(d => d.RoomId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("rating_roomid_foreign");

            entity.HasOne(d => d.User).WithMany(p => p.Ratings)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("rating_userid_foreign");
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("role_id_primary");
            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd();
            entity.ToTable("Role");

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255);
        });

        modelBuilder.Entity<Room>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("room_id_primary");
            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd();
            entity.ToTable("Room");

            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Length)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Services)
                .HasMaxLength(255);
            entity.Property(e => e.Width)
                .IsRequired()
                .HasMaxLength(255);

            entity.HasOne(d => d.House).WithMany(p => p.Rooms)
                .HasForeignKey(d => d.HouseId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("room_houseid_foreign");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("user_id_primary");
            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd();
            entity.ToTable("User");

            entity.Property(e => e.Address)
                .HasMaxLength(255);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Dob).HasColumnType("datetime");
            entity.Property(e => e.Email)
                .HasMaxLength(255);
            entity.HasIndex(e => e.Email).IsUnique().HasDatabaseName("user_email_unique");
            entity.Property(e => e.FullName)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Username)
                .IsRequired()
                .HasMaxLength(255);
            entity.HasIndex(e => e.Username).IsUnique().HasDatabaseName("user_Username_unique");
            entity.Property(e => e.Gender)
                .HasMaxLength(255);
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.PhoneNumber)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.Role).WithMany(p => p.Users)
                .HasForeignKey(d => d.RoleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("user_roleid_foreign");
        });

        Guid adminRoleId = new Guid("8f82ec39-63e6-4cd4-95d2-091a656ae301");
        Guid customerRoleId = new Guid("bcadf39b-13b8-4958-8472-61f4c993fbe5");
        Guid tempRoomId = new Guid("1b9cbb78-8942-4783-8e26-b19e8e7e98c8");

        modelBuilder.Entity<Role>().HasData(
            new Role { Id = adminRoleId, Name = "Admin" },
            new Role { Id = customerRoleId, Name = "Customer" }
        );

        // Seeding users with the appropriate RoleId
        modelBuilder.Entity<User>().HasData(
            new User { Id = Guid.NewGuid(), Username = "Admin1", FullName = "Admin 1", Email = "Admin1@email.com", Password = PasswordTools.HashPassword("123456"), PhoneNumber = "123456789", RoleId = adminRoleId },
            new User { Id = Guid.NewGuid(), Username = "Admin2", FullName = "Admin 2", Email = "Admin2@email.com", Password = PasswordTools.HashPassword("123456"), PhoneNumber = "123456789", RoleId = adminRoleId },
            new User { Id = Guid.NewGuid(), Username = "Customer1", FullName = "Customer 1", Email = "Customer1@email.com", Password = PasswordTools.HashPassword("123456"), PhoneNumber = "123456789", RoleId = customerRoleId },
            new User { Id = Guid.NewGuid(), Username = "Customer2", FullName = "Customer 2", Email = "Customer2@email.com", Password = PasswordTools.HashPassword("123456"), PhoneNumber = "123456789", RoleId = customerRoleId },
            new User { Id = Guid.NewGuid(), Username = "Customer3", FullName = "Customer 3", Email = "Customer3@email.com", Password = PasswordTools.HashPassword("123456"), PhoneNumber = "123456789", RoleId = customerRoleId },
            new User { Id = Guid.NewGuid(), Username = "Customer4", FullName = "Customer 4", Email = "Customer4@email.com", Password = PasswordTools.HashPassword("123456"), PhoneNumber = "123456789", RoleId = customerRoleId },
            new User { Id = Guid.NewGuid(), Username = "Customer5", FullName = "Customer 5", Email = "Customer5@email.com", Password = PasswordTools.HashPassword("123456"), PhoneNumber = "123456789", RoleId = customerRoleId },
            new User { Id = Guid.NewGuid(), Username = "Customer6", FullName = "Customer 6", Email = "Customer6@email.com", Password = PasswordTools.HashPassword("123456"), PhoneNumber = "123456789", RoleId = customerRoleId },
            new User { Id = Guid.NewGuid(), Username = "Customer7", FullName = "Customer 7", Email = "Customer7@email.com", Password = PasswordTools.HashPassword("123456"), PhoneNumber = "123456789", RoleId = customerRoleId },
            new User { Id = Guid.NewGuid(), Username = "Customer8", FullName = "Customer 8", Email = "Customer8@email.com", Password = PasswordTools.HashPassword("123456"), PhoneNumber = "123456789", RoleId = customerRoleId },
            new User { Id = Guid.NewGuid(), Username = "Customer9", FullName = "Customer 9", Email = "Customer9@email.com", Password = PasswordTools.HashPassword("123456"), PhoneNumber = "123456789", RoleId = customerRoleId },
            new User { Id = Guid.NewGuid(), Username = "Customer10", FullName = "Customer 10", Email = "Customer10@email.com", Password = PasswordTools.HashPassword("123456"), PhoneNumber = "123456789", RoleId = customerRoleId },
            new User { Id = Guid.NewGuid(), Username = "Customer11", FullName = "Customer 11", Email = "Customer11@email.com", Password = PasswordTools.HashPassword("123456"), PhoneNumber = "123456789", RoleId = customerRoleId },
            new User { Id = Guid.NewGuid(), Username = "Customer12", FullName = "Customer 12", Email = "Customer12@email.com", Password = PasswordTools.HashPassword("123456"), PhoneNumber = "123456789", RoleId = customerRoleId },
            new User { Id = Guid.NewGuid(), Username = "Customer13", FullName = "Customer 13", Email = "Customer13@email.com", Password = PasswordTools.HashPassword("123456"), PhoneNumber = "123456789", RoleId = customerRoleId },
            new User { Id = Guid.NewGuid(), Username = "Customer14", FullName = "Customer 14", Email = "Customer14@email.com", Password = PasswordTools.HashPassword("123456"), PhoneNumber = "123456789", RoleId = customerRoleId },
            new User { Id = Guid.NewGuid(), Username = "Customer15", FullName = "Customer 15", Email = "Customer15@email.com", Password = PasswordTools.HashPassword("123456"), PhoneNumber = "123456789", RoleId = customerRoleId }
        );

        modelBuilder.Entity<Room>().HasData(
            new Room { Id = tempRoomId, Name = "Temporary Room", Description = "This is a room. Here is some more characters to test the length of the text box", Length = "10m", Width = "5m" }
        );

        modelBuilder.Entity<Post>().HasData(
            new Post { Id = Guid.NewGuid(), RoomId = tempRoomId, Title = "Temporary Post", Description = "This is a post. Here is some more characters to test the length of the text box", ImageUrl = "not yet set up", Price = 10000, Phone = "123456789", SocialAccount = "zalo || fb" }
        );

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}